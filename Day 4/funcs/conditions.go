package funcs

import (
	"fmt"
	"log"
)

//_____________________________________________Условные выражения_____________________________________________

func Conditions() {
	log.Println("Условные выражения")

	//В виде переменной
	var a bool = true
	//При объявлении переменной без значения оно автоматически ставится как "false" (т.е неверно)
	var b bool

	fmt.Println("Заранее прописанное верное значение:", a) // true
	fmt.Println("Значение по умолчанию:", b)               // false

	//_____________________________________________Логические операции_____________________________________________
	fmt.Println()
	log.Println("Логические операции")

	//Операция отрицания - ! (противоположность)
	//a = true, но с ! знаком происходит инверсия
	var not bool = !a
	fmt.Println("Отрицание:", not) // false

	//Конъюнкция, логическое умножение - && (И то и то)
	//Запишет в переменную "and" верное значение (true), только если условие слева от конъюнкции (&&) и справа будут оба возвращать "true"
	//В случае ниже 5 не больше 6, одно из перечисленных условий НЕ верно, поэтому результат будет отрицательный.
	var and bool = 5 > 6 && 6 < 9 && 1 > 0
	fmt.Println("Конъюнкция:", and) // false

	//Дизъюнкция, логическое сложение - || (Хотя бы одно)
	// 3 не равно 5, однако 10 больше 8-ми. Второе условие верно, поэтому операция вернёт верное значение.
	/*
		Важно!
		= - Оператор присвоения. Этим символом мы присваиваем переменной какое-либо значение.
		== - Сравнение двух значений "Равно"
	*/
	var or bool = 3 == 5 || 10 > 8
	fmt.Println("Дизъюнкция:", or) // true

	//_____________________________________________Условные конструкции_____________________________________________
	fmt.Println()
	log.Println("Условные конструкции")

	//Конструкция "if...else"

	//Создали две переменные одинакового типа (int)
	firstVal := 8
	secondVal := 8
	fmt.Println()
	log.Println("if else")
	//Запускаем условие
	if firstVal < secondVal {
		//Если первое значение меньше второго, сработает этот блок кода
		fmt.Println("a меньше b")
	} else if firstVal > secondVal {
		//Добавим ещё одно условие: Если же первое значение больше второго, сработает этот блок кода
		fmt.Println("a больше b")
	} else {
		//Во всех других случаях, не описанных выше в "if" условиях, запустится этот блок кода. Буквально: "Иначе"
		fmt.Println("a равно b")
	}

	fmt.Println()
	log.Println("switch case с переменной")
	//Конструкция "switch...case"
	number := 5
	//Сверка значения переменной со случаями описанными в "case"
	switch number {
	case 9:
		//if number == 9
		fmt.Println("a = 9")
	case 8:
		//if number == 8
		fmt.Println("a = 8")
	case 7:
		//if number == 7
		fmt.Println("a = 7")
	case 6, 5, 4:
		//if number == 6 || number == 5 || number == 4
		//Важно понимать, что условия проверяются слева направо, и если кейс посередине (5) будет верным, следующий (4) проверяться НЕ будет! Подробнее в файле "switch.go"
		fmt.Println("a = 6 или 5 или 4, но это не точно")
	default:
		//else
		fmt.Println("значение переменной a не определено")
	}

	//Вариант запуска switch case конструкции без привязки к переменной (подходит для проверки иного условия, кроме "=="):
	//Конвертируем вышеупомянутое сравнение из if в switch
	firstVal = 10
	fmt.Println()
	log.Println("switch case без переменной")
	//Запускаем условие
	switch {
	case firstVal < secondVal:
		//Если первое значение меньше второго, сработает этот блок кода
		fmt.Println("a меньше b")
	case firstVal > secondVal:
		//Если первое значение больше второго, сработает этот блок кода
		fmt.Println("a больше b")
		//break выходит из switch'а.
		//p.s IDE может сейчас ругаться, что его использование тут излишне, что верно. Написано ради примера.
		break
	default:
		//Во всех других случаях, не описанных выше в "case", запустится этот блок кода. Буквально: "По умолчанию"
		fmt.Println("a равно b")
	}
}
